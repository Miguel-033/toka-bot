const { Telegraf, Markup } = require("telegraf");
const https = require("https");
const path = require("path");
const tales = require("./modules/stories");
const relatos = require("./modules/relatos");
const {
  getUserFavorites,
  addFavorite,
  removeFavorite,
} = require("./modules/favorites");
const {
  setupWordOfDay,
  subscribe,
  unsubscribe,
} = require("./modules/wordOfDay");

const agent = new https.Agent({ family: 4 });
const bot = new Telegraf(process.env.BOT_TOKEN, { telegram: { agent } });

console.log("ü§ñ –ë–æ—Ç Toka –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù");

// ==========================
// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
// ==========================
const levels = ["A1", "A2", "B1", "B2"];
const userLevels = new Map();

// ==========================
// /start
// ==========================
bot.start(async (ctx) => {
  await ctx.replyWithPhoto(
    { source: path.join(__dirname, "toka.jpg") },
    {
      caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø Toka üê∏\n–¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ.`,
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–æ–≤–æ –¥–Ω—è", callback_data: "sub_word" }],
          [{ text: "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "unsub_word" }],
        ],
      },
    }
  );

  await ctx.reply("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: levels
        .map((lvl, i) => (i % 2 === 0 ? [lvl, levels[i + 1]] : []))
        .filter((r) => r.length),
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// ==========================
// –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ –¥–Ω—è
// ==========================
bot.action("sub_word", (ctx) => {
  subscribe(ctx.chat.id);
  ctx.answerCbQuery("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!");
  ctx.reply("–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–æ –¥–Ω—è üìö");
});

bot.action("unsub_word", (ctx) => {
  unsubscribe(ctx.chat.id);
  ctx.answerCbQuery("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
  ctx.reply("–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–æ–≤–∞ –¥–Ω—è.");
});

// ==========================
// –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
// ==========================
bot.hears(levels, (ctx) => {
  const level = ctx.message.text;
  userLevels.set(ctx.from.id, level);
  ctx.reply(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:`, {
    reply_markup: {
      keyboard: [
        ["üìö –°–∫–∞–∑–∫–∏", "üß† –í—Ä–µ–º–µ–Ω–∞"],
        ["üìñ –†–∞—Å—Å–∫–∞–∑—ã", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["üîÅ –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"],
      ],
      resize_keyboard: true,
    },
  });
});

// ==========================
// –°–∫–∞–∑–∫–∏
// ==========================
bot.hears("üìö –°–∫–∞–∑–∫–∏", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  if (!level) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å.");
  const talesList = tales.filter((t) => t.level === level);
  if (talesList.length === 0) return ctx.reply("–ù–µ—Ç —Å–∫–∞–∑–æ–∫ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ üò¢");

  const buttons = talesList.map((t) => [
    Markup.button.callback(t.title, `tale_${t.slug}`),
  ]);
  ctx.reply(`–í–æ—Ç —Å–∫–∞–∑–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}:`, Markup.inlineKeyboard(buttons));
});

// ==========================
// –†–∞—Å—Å–∫–∞–∑—ã
// ==========================
bot.hears("üìñ –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  if (!level) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å.");
  const relatosList = relatos.filter((r) => r.level === level);
  if (relatosList.length === 0)
    return ctx.reply("–ù–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ üò¢");

  const buttons = relatosList.map((r) => [
    Markup.button.callback(r.title, `relato_${r.slug}`),
  ]);
  ctx.reply(
    `–í–æ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}:`,
    Markup.inlineKeyboard(buttons)
  );
});

// ==========================
// –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
// ==========================
bot.hears("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => {
  const favs = getUserFavorites(ctx.from.id);
  if (!favs.length)
    return ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–æ–≤");

  const buttons = favs
    .map((item) => {
      const list = item.type === "tale" ? tales : relatos;
      const story = list.find((s) => s.slug === item.slug);
      if (!story) return null;
      const prefix = item.type === "tale" ? "tale_" : "relato_";
      return [Markup.button.callback(story.title, `${prefix}${item.slug}`)];
    })
    .filter(Boolean);

  ctx.reply("‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:", Markup.inlineKeyboard(buttons));
});

function getFavButton(userId, type, slug) {
  const favs = getUserFavorites(userId);
  const isFav = favs.some((item) => item.slug === slug && item.type === type);
  const prefix = type === "tale" ? "favTale" : "favRelato";
  const label = isFav ? "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
  return Markup.button.callback(label, `${prefix}_${slug}`);
}

// ==========================
// –°–ª–æ–≤–æ –¥–Ω—è (cron + —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)
// ==========================
const wod = setupWordOfDay(bot, {
  timezone: "Europe/Madrid",
  hour: 10,
  minute: 0,
});

bot.command("wod_now", async (ctx) => {
  await ctx.reply("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ¬´—Å–ª–æ–≤–æ –¥–Ω—è¬ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Ä¶");
  try {
    await wod.broadcast();
    await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ");
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.");
  }
});

// ==========================
// –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞
// ==========================
module.exports = bot;

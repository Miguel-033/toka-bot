const { Telegraf, Markup } = require("telegraf");
const tales = require("./data/tales.json");
const bot = new Telegraf(process.env.BOT_TOKEN);

// –í–æ–∑–º–æ–∂–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
const levels = ["A1", "A2", "B1", "B2"];
const userLevels = new Map();

bot.start((ctx) => {
  ctx.replyWithPhoto(
    { source: "toka.jpg" },
    {
      caption: `¬°Hola, ${ctx.from.first_name}! Soy Toka üê∏\nTu ayudante para aprender espa√±ol con cuentos.\nSelecciona tu nivel:`,
      reply_markup: {
        keyboard: levels.map((lvl) => [lvl]),
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    }
  );
});

bot.hears(levels, (ctx) => {
  const level = ctx.message.text;
  userLevels.set(ctx.from.id, level);
  ctx.reply(`‚úÖ Nivel ${level} seleccionado. Elige una secci√≥n:`, {
    reply_markup: {
      keyboard: [
        ["üìö –°–∫–∞–∑–∫–∏", "üß† –í—Ä–µ–º–µ–Ω–∞"],
        ["üìñ –†–∞—Å—Å–∫–∞–∑—ã", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["üîÅ –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"],
      ],
      resize_keyboard: true,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

bot.hears("üìö –°–∫–∞–∑–∫–∏", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  const talesList = tales.filter((t) => t.level === level);
  if (talesList.length === 0) {
    return ctx.reply("–ù–µ—Ç —Å–∫–∞–∑–æ–∫ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ üò¢");
  }
  const buttons = talesList.map((t) => [
    Markup.button.callback(t.title, `tale_${t.slug}`),
  ]);
  ctx.reply(`–í–æ—Ç —Å–∫–∞–∑–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}:`, Markup.inlineKeyboard(buttons));
});

bot.hears("üîÅ –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: levels.map((lvl) => [lvl]),
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// –ü–æ–∫–∞-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
bot.hears("üìñ –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => {
  ctx.reply("–†–∞–∑–¥–µ–ª —Å —Ä–∞—Å—Å–∫–∞–∑–∞–º–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...");
});

bot.hears("üß† –í—Ä–µ–º–µ–Ω–∞", (ctx) => {
  ctx.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º—ë–Ω üòä");
});

bot.hears("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => {
  ctx.reply("–¢—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê");
});

// –ß—Ç–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
bot.action(/tale_(.+)/, (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");
  ctx.reply(
    tale.text,
    Markup.inlineKeyboard([
      [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", `audio_${slug}`)],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `volver`)],
    ])
  );
});

bot.action(/audio_(.+)/, async (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale || !tale.audio_url) return ctx.reply("–ê—É–¥–∏–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
  await ctx.replyWithVoice({ url: tale.audio_url });
});

bot.action("volver", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  const talesList = tales.filter((t) => t.level === level);
  const buttons = talesList.map((t) => [
    Markup.button.callback(t.title, `tale_${t.slug}`),
  ]);
  ctx.editMessageText(
    `–°–∫–∞–∑–∫–∏ —É—Ä–æ–≤–Ω—è ${level}:`,
    Markup.inlineKeyboard(buttons)
  );
});

module.exports = bot;

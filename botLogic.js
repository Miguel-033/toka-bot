const { Telegraf, Markup } = require("telegraf");
const https = require("https");
const path = require("path");
const fs = require("fs");
const tales = require("./modules/stories");
const relatos = require("./modules/relatos");
const {
  getUserFavorites,
  addFavorite,
  removeFavorite,
} = require("./modules/favorites");
const { setupWordOfDay } = require("./modules/wordOfDay");

const agent = new https.Agent({ family: 4 });
const bot = new Telegraf(process.env.BOT_TOKEN, { telegram: { agent } });

console.log("ü§ñ –ë–æ—Ç Toka –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù");

const levels = ["A1", "A2", "B1", "B2"];
const userLevels = new Map();

bot.start(async (ctx) => {
  // 1) –§–æ—Ç–æ + inline-–∫–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  await ctx.replyWithPhoto(
    { source: path.join(__dirname, "toka.jpg") },
    {
      caption: `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø Toka üê∏\n–¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ.`,
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–æ–≤–æ –¥–Ω—è", callback_data: "wod:on" }],
        ],
      },
    }
  );

  // 2) –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É—Ä–æ–≤–Ω–µ–π (ReplyKeyboard)
  await ctx.reply("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: levels
        .map((lvl, i) => (i % 2 === 0 ? [lvl, levels[i + 1]] : []))
        .filter((r) => r.length),
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

bot.hears(levels, (ctx) => {
  const level = ctx.message.text;
  userLevels.set(ctx.from.id, level);
  ctx.reply(`‚úÖ –£—Ä–æ–≤–µ–Ω—å ${level} –≤—ã–±—Ä–∞–Ω. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:`, {
    reply_markup: {
      keyboard: [
        ["üìö –°–∫–∞–∑–∫–∏", "üß† –í—Ä–µ–º–µ–Ω–∞"],
        ["üìñ –†–∞—Å—Å–∫–∞–∑—ã", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
        ["üîÅ –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"],
      ],
      resize_keyboard: true,
    },
  });
});

bot.hears("üìö –°–∫–∞–∑–∫–∏", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  if (!level) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å.");
  const talesList = tales.filter((t) => t.level === level);
  if (talesList.length === 0) return ctx.reply("–ù–µ—Ç —Å–∫–∞–∑–æ–∫ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ üò¢");

  const buttons = talesList.map((t) => [
    Markup.button.callback(t.title, `tale_${t.slug}`),
  ]);
  ctx.reply(`–í–æ—Ç —Å–∫–∞–∑–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}:`, Markup.inlineKeyboard(buttons));
});

bot.hears("üìñ –†–∞—Å—Å–∫–∞–∑—ã", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  if (!level) return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å.");
  const relatosList = relatos.filter((r) => r.level === level);
  if (relatosList.length === 0)
    return ctx.reply("–ù–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ üò¢");

  const buttons = relatosList.map((r) => [
    Markup.button.callback(r.title, `relato_${r.slug}`),
  ]);
  ctx.reply(
    `–í–æ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã –¥–ª—è —É—Ä–æ–≤–Ω—è ${level}:`,
    Markup.inlineKeyboard(buttons)
  );
});

bot.hears("üîÅ –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", (ctx) => {
  ctx.reply("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:", {
    reply_markup: {
      keyboard: levels
        .map((lvl, i) => (i % 2 === 0 ? [lvl, levels[i + 1]] : []))
        .filter((r) => r.length),
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

bot.hears("üß† –í—Ä–µ–º–µ–Ω–∞", (ctx) => {
  ctx.reply("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—Ä–µ–º—ë–Ω üòä");
});

bot.hears("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", (ctx) => {
  const favs = getUserFavorites(ctx.from.id);
  if (!favs.length)
    return ctx.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–æ–≤");

  const buttons = favs
    .map((item) => {
      const list = item.type === "tale" ? tales : relatos;
      const story = list.find((s) => s.slug === item.slug);
      if (!story) return null;
      const prefix = item.type === "tale" ? "tale_" : "relato_";
      return [Markup.button.callback(story.title, `${prefix}${item.slug}`)];
    })
    .filter(Boolean);

  ctx.reply("‚≠ê –¢–≤–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ:", Markup.inlineKeyboard(buttons));
});

function getFavButton(userId, type, slug) {
  const favs = getUserFavorites(userId);
  const isFav = favs.some((item) => item.slug === slug && item.type === type);
  const prefix = type === "tale" ? "favTale" : "favRelato";
  const label = isFav ? "‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
  return Markup.button.callback(label, `${prefix}_${slug}`);
}

const { subscribe, unsubscribe } = require("./modules/wordOfDay");

module.exports = (bot) => {
  bot.start((ctx) => {
    ctx.reply(
      "üëã –ü—Ä–∏–≤–µ—Ç! –Ø TokaBot. –•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å *–°–ª–æ–≤–æ –¥–Ω—è* –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?",
      {
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "sub_word" }],
            [{ text: "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data: "unsub_word" }],
          ],
        },
      }
    );
  });

  bot.action("sub_word", (ctx) => {
    subscribe(ctx.chat.id);
    ctx.answerCbQuery("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –°–ª–æ–≤–æ –¥–Ω—è!");
    ctx.reply("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–ª–æ–≤–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üìö");
  });

  bot.action("unsub_word", (ctx) => {
    unsubscribe(ctx.chat.id);
    ctx.answerCbQuery("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
    ctx.reply("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ª–æ–≤–∞ –¥–Ω—è.");
  });
};

// Tales

bot.action(/tale_(.+)/, (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

  const favBtn = getFavButton(ctx.from.id, "tale", slug);

  ctx.replyWithMarkdownV2(
    `*${tale.title}*`,
    Markup.inlineKeyboard([
      [Markup.button.callback("üìñ –ß–∏—Ç–∞—Ç—å", `readTale_${slug}`)],
      [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", `audio_${slug}`)],
      [favBtn],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "volverTales")],
    ])
  );
});

bot.action(/readTale_(.+)/, (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");
  ctx.reply(tale.text);
});

bot.action(/favTale_(.+)/, async (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

  const favs = getUserFavorites(ctx.from.id);
  const exists = favs.some(
    (item) => item.slug === slug && item.type === "tale"
  );

  if (exists) {
    removeFavorite(ctx.from.id, { slug, type: "tale" });
  } else {
    addFavorite(ctx.from.id, { slug, type: "tale" });
  }

  const updatedBtn = getFavButton(ctx.from.id, "tale", slug);
  await ctx.editMessageReplyMarkup(
    Markup.inlineKeyboard([
      [Markup.button.callback("üìñ –ß–∏—Ç–∞—Ç—å", `readTale_${slug}`)],
      [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", `audio_${slug}`)],
      [updatedBtn],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "volverTales")],
    ])
  );
});

// Relatos

bot.action(/relato_(.+)/, (ctx) => {
  const slug = ctx.match[1];
  const relato = relatos.find((r) => r.slug === slug);
  if (!relato) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

  const favBtn = getFavButton(ctx.from.id, "relato", slug);

  ctx.replyWithMarkdownV2(
    `*${relato.title}*`,
    Markup.inlineKeyboard([
      [Markup.button.callback("üìñ –ß–∏—Ç–∞—Ç—å", `readRelato_${slug}`)],
      [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", `audioRelato_${slug}`)],
      [favBtn],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "volverRelatos")],
    ])
  );
});

bot.action(/readRelato_(.+)/, (ctx) => {
  const slug = ctx.match[1];
  const relato = relatos.find((r) => r.slug === slug);
  if (!relato) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");
  ctx.reply(relato.text);
});

bot.action(/favRelato_(.+)/, async (ctx) => {
  const slug = ctx.match[1];
  const relato = relatos.find((r) => r.slug === slug);
  if (!relato) return ctx.answerCbQuery("–ù–µ –Ω–∞–π–¥–µ–Ω–æ");

  const favs = getUserFavorites(ctx.from.id);
  const exists = favs.some(
    (item) => item.slug === slug && item.type === "relato"
  );

  if (exists) {
    removeFavorite(ctx.from.id, { slug, type: "relato" });
  } else {
    addFavorite(ctx.from.id, { slug, type: "relato" });
  }

  const updatedBtn = getFavButton(ctx.from.id, "relato", slug);
  await ctx.editMessageReplyMarkup(
    Markup.inlineKeyboard([
      [Markup.button.callback("üìñ –ß–∏—Ç–∞—Ç—å", `readRelato_${slug}`)],
      [Markup.button.callback("üîä –°–ª—É—à–∞—Ç—å", `audioRelato_${slug}`)],
      [updatedBtn],
      [Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "volverRelatos")],
    ])
  );
});

// Audio

bot.action(/audio_(.+)/, async (ctx) => {
  const slug = ctx.match[1];
  const tale = tales.find((t) => t.slug === slug);
  if (!tale || !tale.audio_id)
    return ctx.answerCbQuery("–ê—É–¥–∏–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
  await ctx.answerCbQuery();
  await ctx.telegram.sendVoice(ctx.chat.id, tale.audio_id);
});

bot.action(/audioRelato_(.+)/, async (ctx) => {
  const slug = ctx.match[1];
  const relato = relatos.find((r) => r.slug === slug);
  if (!relato || !relato.audio_id)
    return ctx.answerCbQuery("–ê—É–¥–∏–æ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ");
  await ctx.answerCbQuery();
  await ctx.telegram.sendVoice(ctx.chat.id, relato.audio_id);
});

// –ù–∞–∑–∞–¥

bot.action("volverTales", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  const talesList = tales.filter((t) => t.level === level);
  const buttons = talesList.map((t) => [
    Markup.button.callback(t.title, `tale_${t.slug}`),
  ]);
  ctx.editMessageText(
    `–°–∫–∞–∑–∫–∏ —É—Ä–æ–≤–Ω—è ${level}:`,
    Markup.inlineKeyboard(buttons)
  );
});

bot.action("volverRelatos", (ctx) => {
  const level = userLevels.get(ctx.from.id);
  const relatosList = relatos.filter((r) => r.level === level);
  const buttons = relatosList.map((r) => [
    Markup.button.callback(r.title, `relato_${r.slug}`),
  ]);
  ctx.editMessageText(
    `–†–∞—Å—Å–∫–∞–∑—ã —É—Ä–æ–≤–Ω—è ${level}:`,
    Markup.inlineKeyboard(buttons)
  );
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ file_id –¥–ª—è –∞—É–¥–∏–æ

bot.on("voice", (ctx) => {
  const fileId = ctx.message.voice.file_id;
  console.log("VOICE file_id:", fileId);
  ctx.reply(`file_id: ${fileId}`);
});

// –°–ª–æ–≤–æ –¥–Ω—è
const wod = setupWordOfDay(bot, {
  timezone: "Europe/Madrid",
  hour: 10,
  minute: 0,
});

// Dev-–∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –∫—Ä–æ–Ω—É
bot.command("wod_now", async (ctx) => {
  await ctx.reply("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É ¬´—Å–ª–æ–≤–æ –¥–Ω—è¬ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å‚Ä¶");
  try {
    await wod.broadcast();
    await ctx.reply("‚úÖ –ì–æ—Ç–æ–≤–æ");
  } catch (e) {
    console.error(e);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞, —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.");
  }
});

module.exports = bot;
